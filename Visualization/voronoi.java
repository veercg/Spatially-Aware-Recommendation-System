import java.io.*;import java.awt.*;import java.awt.image.BufferedImage;import javax.swing.*;import java.util.*;public class voronoi extends JPanel{	private BufferedImage canvas;	// Constructor	public voronoi(int width, int height,Readfile obj)	{		int n=obj.n;		int coords[][]=new int[100][2];		coords=obj.coords;		int col[] = new int[4];		int fk;		canvas = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);		fillCanvas(Color.white);		// For coloring each pixels...		for(int i=0;i<width;i++)			for(int j=0;j<height;j++)			{				int k=min_dist(i,j,obj); // k is the index of that site point, from where the dist of coord(i,j) is minimum.				int kle=min_dist(i-1,j,obj);				int kri=min_dist(i+1,j,obj);				int kup=min_dist(i,j+1,obj);				int klo=min_dist(i,j-1,obj);				int c=0;				if(k!=kle)				{					col[c] = kle;					c++;				}				if(k!=kri)				{					col[c] = kri;					c++;				}						if(k!=kup)				{					col[c] = kup;					c++;				}				if(k!=klo)				{					col[c] = klo;					c++;				}				if(k!=kle || k!=kri || k!=klo || k!=kup)				{						//k=rand(col,4);							k=1;				}				if(k>9)				{					k=k%10;				}				switch(k)				{					case 0:						canvas.setRGB(i,j, Color.cyan.getRGB());						break;					case 1:						canvas.setRGB(i,j, Color.black.getRGB());						break;					case 2:						canvas.setRGB(i,j, Color.blue.getRGB());						break;					case 3:						canvas.setRGB(i,j, Color.magenta.getRGB());						break;					case 4:						canvas.setRGB(i,j, Color.pink.getRGB());						break;					case 5:						canvas.setRGB(i,j, Color.gray.getRGB());						break;					case 6:						canvas.setRGB(i,j, Color.green.getRGB());						break;					case 7:						canvas.setRGB(i,j, Color.lightGray .getRGB());						break;					case 8:						canvas.setRGB(i,j, Color.orange.getRGB());						break;					case 9:						canvas.setRGB(i,j, Color.yellow.getRGB());						break;				}								}		// For coloring SITE POINTS ... 		for(int i=0;i<n;i++)		{			int x=coords[i][0];			int y=coords[i][1];						for(int m=x-1;m<x+2;m++)				for(int p=y-1;p<y+2;p++)				{					if(m==x&&p==y)						canvas.setRGB(m,p, Color.black.getRGB());					else						canvas.setRGB(m,p, Color.red.getRGB());				}		}					}		// Methods	 public Dimension getPreferredSize() {        return new Dimension(canvas.getWidth(), canvas.getHeight());    }    public void paintComponent(Graphics g) {        super.paintComponent(g);        Graphics2D g2 = (Graphics2D) g;        g2.drawImage(canvas, null, null);    }/*	public int rand(int col[],int n1)	{		int flag=0;		Random r = new Random();		int val = r.nextInt(9);		for(int i=0;i<n1;i++)		{			if(col[i]==val)				flag=1;		}		if(flag==1)		{			rand(col,n1);		}				return 1;	}*/	public static int min_dist(int x,int y,Readfile obj1) // Returns the index of site point(that row of array) from which distance of coord(x,y) is minimum , otherwise if distance from two sites point are equal it will return -1 	{				int min_pos=0,count=0;		double min=Math.sqrt(((x-obj1.coords[0][0])*(x-obj1.coords[0][0]))+((y-obj1.coords[0][1])*(y-obj1.coords[0][1])));		for(int i=1;i<obj1.n;i++)		{			double dist=Math.sqrt(((x-obj1.coords[i][0])*(x-obj1.coords[i][0]))+((y-obj1.coords[i][1])*(y-obj1.coords[i][1])));					if(dist<min)			{				min=dist;				min_pos=i;			}					}			return min_pos;	}			public void fillCanvas(Color c) {        int color = c.getRGB();        for (int x = 0; x <canvas.getWidth(); x++) {            for (int y = 0; y <canvas.getHeight(); y++) {                canvas.setRGB(x, y, color);            }        }        repaint();    }	public static void main(String args[])	{		Readfile Coordfile=new Readfile();		Coordfile.openFile();		Coordfile.readRecords();		Coordfile.closeFile();		int width = 800;        int height = 700;        		voronoi panel = new voronoi(width, height,Coordfile);				System.out.println("Site Point Coordinates are :");			for(int i=0;i<Coordfile.n;i++)			{				System.out.println(Coordfile.coords[i][0]+" "+Coordfile.coords[i][1]);			}		System.out.println("Total No. of Site Points is : "+Coordfile.n);					JFrame frame = new JFrame("VORONOI DIAGRAM - A GUI APPLICATION");        frame.add(panel);        frame.pack();        frame.setVisible(true);        frame.setResizable(true);        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);			}}